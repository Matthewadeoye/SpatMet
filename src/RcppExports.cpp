// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logSumExp_cpp
double logSumExp_cpp(NumericVector x);
RcppExport SEXP _SpatMet_logSumExp_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// logSumExp_cpp2
double logSumExp_cpp2(arma::vec x);
RcppExport SEXP _SpatMet_logSumExp_cpp2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp_cpp2(x));
    return rcpp_result_gen;
END_RCPP
}
// intPower
int intPower(int a, int b);
RcppExport SEXP _SpatMet_intPower(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(intPower(a, b));
    return rcpp_result_gen;
END_RCPP
}
// logVecMatMult
NumericVector logVecMatMult(NumericVector logV, NumericMatrix M);
RcppExport SEXP _SpatMet_logVecMatMult(SEXP logVSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logV(logVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(logVecMatMult(logV, M));
    return rcpp_result_gen;
END_RCPP
}
// logVecMatMult2
arma::vec logVecMatMult2(arma::vec logV, arma::mat logM);
RcppExport SEXP _SpatMet_logVecMatMult2(SEXP logVSEXP, SEXP logMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type logV(logVSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logM(logMSEXP);
    rcpp_result_gen = Rcpp::wrap(logVecMatMult2(logV, logM));
    return rcpp_result_gen;
END_RCPP
}
// JointTransitionMatrix_cpp
NumericMatrix JointTransitionMatrix_cpp(NumericMatrix gamma, int K);
RcppExport SEXP _SpatMet_JointTransitionMatrix_cpp(SEXP gammaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(JointTransitionMatrix_cpp(gamma, K));
    return rcpp_result_gen;
END_RCPP
}
// state_dist_cpp2
NumericVector state_dist_cpp2(NumericMatrix Gamma);
RcppExport SEXP _SpatMet_state_dist_cpp2(SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(state_dist_cpp2(Gamma));
    return rcpp_result_gen;
END_RCPP
}
// state_dist_cpp
NumericVector state_dist_cpp(double G12, double G21);
RcppExport SEXP _SpatMet_state_dist_cpp(SEXP G12SEXP, SEXP G21SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type G12(G12SEXP);
    Rcpp::traits::input_parameter< double >::type G21(G21SEXP);
    rcpp_result_gen = Rcpp::wrap(state_dist_cpp(G12, G21));
    return rcpp_result_gen;
END_RCPP
}
// randomwalk2_cpp
double randomwalk2_cpp(NumericVector componentR, double PrecisionR);
RcppExport SEXP _SpatMet_randomwalk2_cpp(SEXP componentRSEXP, SEXP PrecisionRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentR(componentRSEXP);
    Rcpp::traits::input_parameter< double >::type PrecisionR(PrecisionRSEXP);
    rcpp_result_gen = Rcpp::wrap(randomwalk2_cpp(componentR, PrecisionR));
    return rcpp_result_gen;
END_RCPP
}
// randomwalk2_cpp2
double randomwalk2_cpp2(arma::vec componentR, double PrecisionR);
RcppExport SEXP _SpatMet_randomwalk2_cpp2(SEXP componentRSEXP, SEXP PrecisionRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type componentR(componentRSEXP);
    Rcpp::traits::input_parameter< double >::type PrecisionR(PrecisionRSEXP);
    rcpp_result_gen = Rcpp::wrap(randomwalk2_cpp2(componentR, PrecisionR));
    return rcpp_result_gen;
END_RCPP
}
// dotproduct_cpp
double dotproduct_cpp(NumericVector v1, NumericVector v2);
RcppExport SEXP _SpatMet_dotproduct_cpp(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(dotproduct_cpp(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// dotproduct2_cpp
NumericVector dotproduct2_cpp(NumericMatrix z, NumericVector v1);
RcppExport SEXP _SpatMet_dotproduct2_cpp(SEXP zSEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    rcpp_result_gen = Rcpp::wrap(dotproduct2_cpp(z, v1));
    return rcpp_result_gen;
END_RCPP
}
// quadform_cpp
double quadform_cpp(NumericVector v1, NumericMatrix z);
RcppExport SEXP _SpatMet_quadform_cpp(SEXP v1SEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(quadform_cpp(v1, z));
    return rcpp_result_gen;
END_RCPP
}
// seasonalComp2_cpp
double seasonalComp2_cpp(NumericVector x, double y, NumericMatrix z);
RcppExport SEXP _SpatMet_seasonalComp2_cpp(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(seasonalComp2_cpp(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// seasonalComp2_cpp2
double seasonalComp2_cpp2(const arma::vec& x, double y, const arma::mat& z);
RcppExport SEXP _SpatMet_seasonalComp2_cpp2(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(seasonalComp2_cpp2(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// logIGMRF1_cpp
double logIGMRF1_cpp(NumericVector x, double y, NumericMatrix z, int rankdef);
RcppExport SEXP _SpatMet_logIGMRF1_cpp(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP rankdefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type rankdef(rankdefSEXP);
    rcpp_result_gen = Rcpp::wrap(logIGMRF1_cpp(x, y, z, rankdef));
    return rcpp_result_gen;
END_RCPP
}
// logIGMRF1_cpp2
double logIGMRF1_cpp2(const arma::vec& x, double y, const arma::mat& z, int rankdef);
RcppExport SEXP _SpatMet_logIGMRF1_cpp2(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP rankdefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type rankdef(rankdefSEXP);
    rcpp_result_gen = Rcpp::wrap(logIGMRF1_cpp2(x, y, z, rankdef));
    return rcpp_result_gen;
END_RCPP
}
// GeneralLoglikelihood_cpp
double GeneralLoglikelihood_cpp(NumericMatrix y, NumericVector r, NumericVector s, NumericVector u, NumericMatrix Gamma, NumericMatrix e_it, NumericVector B, int model, NumericMatrix z_it, NumericMatrix z_it2);
RcppExport SEXP _SpatMet_GeneralLoglikelihood_cpp(SEXP ySEXP, SEXP rSEXP, SEXP sSEXP, SEXP uSEXP, SEXP GammaSEXP, SEXP e_itSEXP, SEXP BSEXP, SEXP modelSEXP, SEXP z_itSEXP, SEXP z_it2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_it(z_itSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_it2(z_it2SEXP);
    rcpp_result_gen = Rcpp::wrap(GeneralLoglikelihood_cpp(y, r, s, u, Gamma, e_it, B, model, z_it, z_it2));
    return rcpp_result_gen;
END_RCPP
}
// GeneralLoglikelihood_cpp2
double GeneralLoglikelihood_cpp2(NumericMatrix y, NumericVector r, NumericVector s, NumericVector u, NumericMatrix Gamma, NumericMatrix e_it, NumericVector B, int model, NumericMatrix z_it, NumericMatrix z_it2);
RcppExport SEXP _SpatMet_GeneralLoglikelihood_cpp2(SEXP ySEXP, SEXP rSEXP, SEXP sSEXP, SEXP uSEXP, SEXP GammaSEXP, SEXP e_itSEXP, SEXP BSEXP, SEXP modelSEXP, SEXP z_itSEXP, SEXP z_it2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_it(z_itSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z_it2(z_it2SEXP);
    rcpp_result_gen = Rcpp::wrap(GeneralLoglikelihood_cpp2(y, r, s, u, Gamma, e_it, B, model, z_it, z_it2));
    return rcpp_result_gen;
END_RCPP
}
// multGeneralLoglikelihood_cpp2
double multGeneralLoglikelihood_cpp2(IntegerVector y, int ndept, int time, int nstrain, NumericVector a_k, NumericVector r, NumericVector s, NumericVector u, NumericMatrix Gamma, NumericMatrix e_it, NumericVector B, int model, NumericMatrix Bits, int independentChains);
RcppExport SEXP _SpatMet_multGeneralLoglikelihood_cpp2(SEXP ySEXP, SEXP ndeptSEXP, SEXP timeSEXP, SEXP nstrainSEXP, SEXP a_kSEXP, SEXP rSEXP, SEXP sSEXP, SEXP uSEXP, SEXP GammaSEXP, SEXP e_itSEXP, SEXP BSEXP, SEXP modelSEXP, SEXP BitsSEXP, SEXP independentChainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ndept(ndeptSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type nstrain(nstrainSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_k(a_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bits(BitsSEXP);
    Rcpp::traits::input_parameter< int >::type independentChains(independentChainsSEXP);
    rcpp_result_gen = Rcpp::wrap(multGeneralLoglikelihood_cpp2(y, ndept, time, nstrain, a_k, r, s, u, Gamma, e_it, B, model, Bits, independentChains));
    return rcpp_result_gen;
END_RCPP
}
// hardconstraint_cpp
NumericVector hardconstraint_cpp(NumericVector x);
RcppExport SEXP _SpatMet_hardconstraint_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hardconstraint_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rmvn
NumericVector rcpp_rmvn(int n, NumericVector v, NumericMatrix m);
RcppExport SEXP _SpatMet_rcpp_rmvn(SEXP nSEXP, SEXP vSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rmvn(n, v, m));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dmvn
double rcpp_dmvn(NumericVector x, NumericVector u, NumericMatrix m);
RcppExport SEXP _SpatMet_rcpp_dmvn(SEXP xSEXP, SEXP uSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dmvn(x, u, m));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dmvn2
double rcpp_dmvn2(const arma::vec& x, const arma::vec& mu, const arma::mat& sigma);
RcppExport SEXP _SpatMet_rcpp_dmvn2(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dmvn2(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_updateCov
NumericMatrix rcpp_updateCov(NumericMatrix C, NumericVector x, int n, NumericVector xbar);
RcppExport SEXP _SpatMet_rcpp_updateCov(SEXP CSEXP, SEXP xSEXP, SEXP nSEXP, SEXP xbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xbar(xbarSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_updateCov(C, x, n, xbar));
    return rcpp_result_gen;
END_RCPP
}
// chol_cpp
arma::mat chol_cpp(const arma::mat& X);
RcppExport SEXP _SpatMet_chol_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// makematrix_cpp
NumericMatrix makematrix_cpp(double g12, double g21);
RcppExport SEXP _SpatMet_makematrix_cpp(SEXP g12SEXP, SEXP g21SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type g12(g12SEXP);
    Rcpp::traits::input_parameter< double >::type g21(g21SEXP);
    rcpp_result_gen = Rcpp::wrap(makematrix_cpp(g12, g21));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_cpp
NumericMatrix tcrossprod_cpp(NumericVector x);
RcppExport SEXP _SpatMet_tcrossprod_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// ColMeans_cpp
NumericVector ColMeans_cpp(NumericMatrix M);
RcppExport SEXP _SpatMet_ColMeans_cpp(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(ColMeans_cpp(M));
    return rcpp_result_gen;
END_RCPP
}
// makeDiagMat_cpp
NumericMatrix makeDiagMat_cpp(double epsilonS, int n);
RcppExport SEXP _SpatMet_makeDiagMat_cpp(SEXP epsilonSSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type epsilonS(epsilonSSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(makeDiagMat_cpp(epsilonS, n));
    return rcpp_result_gen;
END_RCPP
}
// cov_cpp
NumericMatrix cov_cpp(NumericMatrix X);
RcppExport SEXP _SpatMet_cov_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// add2matrices_cpp
NumericMatrix add2matrices_cpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _SpatMet_add2matrices_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(add2matrices_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// subtract2matrices_cpp
NumericMatrix subtract2matrices_cpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _SpatMet_subtract2matrices_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(subtract2matrices_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// multiply2matrices_cpp
NumericMatrix multiply2matrices_cpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _SpatMet_multiply2matrices_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply2matrices_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// inv_cpp
NumericMatrix inv_cpp(NumericMatrix x);
RcppExport SEXP _SpatMet_inv_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// multInfer_cpp
NumericMatrix multInfer_cpp(IntegerVector y, NumericMatrix e_it, int nstrain, int Model, NumericMatrix Bits, NumericVector CrudeR, NumericVector CrudeS, NumericVector CrudeU, NumericMatrix RW2PrecMat, NumericMatrix RW1PrecMat, NumericMatrix R, int rankdef, int independentChains, int num_iteration, double meanR, NumericVector SumYk_vec);
RcppExport SEXP _SpatMet_multInfer_cpp(SEXP ySEXP, SEXP e_itSEXP, SEXP nstrainSEXP, SEXP ModelSEXP, SEXP BitsSEXP, SEXP CrudeRSEXP, SEXP CrudeSSEXP, SEXP CrudeUSEXP, SEXP RW2PrecMatSEXP, SEXP RW1PrecMatSEXP, SEXP RSEXP, SEXP rankdefSEXP, SEXP independentChainsSEXP, SEXP num_iterationSEXP, SEXP meanRSEXP, SEXP SumYk_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< int >::type nstrain(nstrainSEXP);
    Rcpp::traits::input_parameter< int >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bits(BitsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CrudeR(CrudeRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CrudeS(CrudeSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CrudeU(CrudeUSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type RW2PrecMat(RW2PrecMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type RW1PrecMat(RW1PrecMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type rankdef(rankdefSEXP);
    Rcpp::traits::input_parameter< int >::type independentChains(independentChainsSEXP);
    Rcpp::traits::input_parameter< int >::type num_iteration(num_iterationSEXP);
    Rcpp::traits::input_parameter< double >::type meanR(meanRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SumYk_vec(SumYk_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(multInfer_cpp(y, e_it, nstrain, Model, Bits, CrudeR, CrudeS, CrudeU, RW2PrecMat, RW1PrecMat, R, rankdef, independentChains, num_iteration, meanR, SumYk_vec));
    return rcpp_result_gen;
END_RCPP
}
// gradmultstrainLoglikelihood2_cpp
List gradmultstrainLoglikelihood2_cpp(arma::cube y, arma::mat e_it, int nstrain, arma::vec r, arma::vec s, arma::vec u, NumericMatrix Gamma, NumericVector B, NumericMatrix Bits, arma::vec a_k, int Model, arma::mat Q_r, arma::mat Q_s, arma::mat Q_u);
RcppExport SEXP _SpatMet_gradmultstrainLoglikelihood2_cpp(SEXP ySEXP, SEXP e_itSEXP, SEXP nstrainSEXP, SEXP rSEXP, SEXP sSEXP, SEXP uSEXP, SEXP GammaSEXP, SEXP BSEXP, SEXP BitsSEXP, SEXP a_kSEXP, SEXP ModelSEXP, SEXP Q_rSEXP, SEXP Q_sSEXP, SEXP Q_uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< int >::type nstrain(nstrainSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bits(BitsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a_k(a_kSEXP);
    Rcpp::traits::input_parameter< int >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_r(Q_rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_s(Q_sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_u(Q_uSEXP);
    rcpp_result_gen = Rcpp::wrap(gradmultstrainLoglikelihood2_cpp(y, e_it, nstrain, r, s, u, Gamma, B, Bits, a_k, Model, Q_r, Q_s, Q_u));
    return rcpp_result_gen;
END_RCPP
}
// MMALA_cpp
arma::mat MMALA_cpp(arma::cube y, arma::mat e_it, int Model, NumericMatrix Bits, arma::vec CrudeR, arma::vec CrudeS, arma::vec CrudeU, arma::mat RW2PrecMat, arma::mat RW1PrecMat, arma::mat Ru, int rankdef, int independentChains, int num_iteration, double meanR, List step_sizes);
RcppExport SEXP _SpatMet_MMALA_cpp(SEXP ySEXP, SEXP e_itSEXP, SEXP ModelSEXP, SEXP BitsSEXP, SEXP CrudeRSEXP, SEXP CrudeSSEXP, SEXP CrudeUSEXP, SEXP RW2PrecMatSEXP, SEXP RW1PrecMatSEXP, SEXP RuSEXP, SEXP rankdefSEXP, SEXP independentChainsSEXP, SEXP num_iterationSEXP, SEXP meanRSEXP, SEXP step_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e_it(e_itSEXP);
    Rcpp::traits::input_parameter< int >::type Model(ModelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bits(BitsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CrudeR(CrudeRSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CrudeS(CrudeSSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type CrudeU(CrudeUSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RW2PrecMat(RW2PrecMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RW1PrecMat(RW1PrecMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ru(RuSEXP);
    Rcpp::traits::input_parameter< int >::type rankdef(rankdefSEXP);
    Rcpp::traits::input_parameter< int >::type independentChains(independentChainsSEXP);
    Rcpp::traits::input_parameter< int >::type num_iteration(num_iterationSEXP);
    Rcpp::traits::input_parameter< double >::type meanR(meanRSEXP);
    Rcpp::traits::input_parameter< List >::type step_sizes(step_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(MMALA_cpp(y, e_it, Model, Bits, CrudeR, CrudeS, CrudeU, RW2PrecMat, RW1PrecMat, Ru, rankdef, independentChains, num_iteration, meanR, step_sizes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpatMet_logSumExp_cpp", (DL_FUNC) &_SpatMet_logSumExp_cpp, 1},
    {"_SpatMet_logSumExp_cpp2", (DL_FUNC) &_SpatMet_logSumExp_cpp2, 1},
    {"_SpatMet_intPower", (DL_FUNC) &_SpatMet_intPower, 2},
    {"_SpatMet_logVecMatMult", (DL_FUNC) &_SpatMet_logVecMatMult, 2},
    {"_SpatMet_logVecMatMult2", (DL_FUNC) &_SpatMet_logVecMatMult2, 2},
    {"_SpatMet_JointTransitionMatrix_cpp", (DL_FUNC) &_SpatMet_JointTransitionMatrix_cpp, 2},
    {"_SpatMet_state_dist_cpp2", (DL_FUNC) &_SpatMet_state_dist_cpp2, 1},
    {"_SpatMet_state_dist_cpp", (DL_FUNC) &_SpatMet_state_dist_cpp, 2},
    {"_SpatMet_randomwalk2_cpp", (DL_FUNC) &_SpatMet_randomwalk2_cpp, 2},
    {"_SpatMet_randomwalk2_cpp2", (DL_FUNC) &_SpatMet_randomwalk2_cpp2, 2},
    {"_SpatMet_dotproduct_cpp", (DL_FUNC) &_SpatMet_dotproduct_cpp, 2},
    {"_SpatMet_dotproduct2_cpp", (DL_FUNC) &_SpatMet_dotproduct2_cpp, 2},
    {"_SpatMet_quadform_cpp", (DL_FUNC) &_SpatMet_quadform_cpp, 2},
    {"_SpatMet_seasonalComp2_cpp", (DL_FUNC) &_SpatMet_seasonalComp2_cpp, 3},
    {"_SpatMet_seasonalComp2_cpp2", (DL_FUNC) &_SpatMet_seasonalComp2_cpp2, 3},
    {"_SpatMet_logIGMRF1_cpp", (DL_FUNC) &_SpatMet_logIGMRF1_cpp, 4},
    {"_SpatMet_logIGMRF1_cpp2", (DL_FUNC) &_SpatMet_logIGMRF1_cpp2, 4},
    {"_SpatMet_GeneralLoglikelihood_cpp", (DL_FUNC) &_SpatMet_GeneralLoglikelihood_cpp, 10},
    {"_SpatMet_GeneralLoglikelihood_cpp2", (DL_FUNC) &_SpatMet_GeneralLoglikelihood_cpp2, 10},
    {"_SpatMet_multGeneralLoglikelihood_cpp2", (DL_FUNC) &_SpatMet_multGeneralLoglikelihood_cpp2, 14},
    {"_SpatMet_hardconstraint_cpp", (DL_FUNC) &_SpatMet_hardconstraint_cpp, 1},
    {"_SpatMet_rcpp_rmvn", (DL_FUNC) &_SpatMet_rcpp_rmvn, 3},
    {"_SpatMet_rcpp_dmvn", (DL_FUNC) &_SpatMet_rcpp_dmvn, 3},
    {"_SpatMet_rcpp_dmvn2", (DL_FUNC) &_SpatMet_rcpp_dmvn2, 3},
    {"_SpatMet_rcpp_updateCov", (DL_FUNC) &_SpatMet_rcpp_updateCov, 4},
    {"_SpatMet_chol_cpp", (DL_FUNC) &_SpatMet_chol_cpp, 1},
    {"_SpatMet_makematrix_cpp", (DL_FUNC) &_SpatMet_makematrix_cpp, 2},
    {"_SpatMet_tcrossprod_cpp", (DL_FUNC) &_SpatMet_tcrossprod_cpp, 1},
    {"_SpatMet_ColMeans_cpp", (DL_FUNC) &_SpatMet_ColMeans_cpp, 1},
    {"_SpatMet_makeDiagMat_cpp", (DL_FUNC) &_SpatMet_makeDiagMat_cpp, 2},
    {"_SpatMet_cov_cpp", (DL_FUNC) &_SpatMet_cov_cpp, 1},
    {"_SpatMet_add2matrices_cpp", (DL_FUNC) &_SpatMet_add2matrices_cpp, 2},
    {"_SpatMet_subtract2matrices_cpp", (DL_FUNC) &_SpatMet_subtract2matrices_cpp, 2},
    {"_SpatMet_multiply2matrices_cpp", (DL_FUNC) &_SpatMet_multiply2matrices_cpp, 2},
    {"_SpatMet_inv_cpp", (DL_FUNC) &_SpatMet_inv_cpp, 1},
    {"_SpatMet_multInfer_cpp", (DL_FUNC) &_SpatMet_multInfer_cpp, 16},
    {"_SpatMet_gradmultstrainLoglikelihood2_cpp", (DL_FUNC) &_SpatMet_gradmultstrainLoglikelihood2_cpp, 14},
    {"_SpatMet_MMALA_cpp", (DL_FUNC) &_SpatMet_MMALA_cpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpatMet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
